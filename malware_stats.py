import os
import json
import argparse
from pwnlib.elf import elf
from androguard.misc import AnalyzeAPK

OUT_DIR = "out/"
stats = {}
db = {}


def init_stats():
    stats["permissions"] = {}
    stats["classes"] = {}
    stats["services"] = {}
    stats["activities"] = {}
    stats["receivers"] = {}
    stats["providers"] = {}
    stats["files"] = {}

    return stats


def check_header(header):
    if header == "504b0304":
        return "JAR"

    if header == "7f454c46":
        return "ELF"


def write_to_file(out_dir, file_name, content):
    if not os.path.isdir(out_dir):
        os.makedirs(OUT_DIR)
    f = open(OUT_DIR + "/" + file_name, 'wb')
    f.write(content)
    f.close()


def elf_analysis(elf_file):
    if not os.path.isfile(elf_file):
        return

    library = elf.ELF(elf_file)
    functions = []
    for func in library.symbols.keys():
        functions.append(func)

    return functions


def apk_analysis(apk_path):
    report = dict()
    try:
        a, d, dx = AnalyzeAPK(apk_path)
    except Exception as e:
        print(e)
        return

    package_name = a.get_package()
    report["app_name"] = a.get_app_name()
    report["permissions"] = a.get_permissions()

    for perm in a.get_permissions():
        if perm in stats["permissions"].keys():
            stats["permissions"][perm] += 1
        else:
            stats["permissions"][perm] = 1

    report["classes"] = []

    for class_analysis in dx.get_classes():
        class_name = class_analysis.get_vm_class().get_name()
        report["classes"].append(class_analysis.get_vm_class().get_name())
        if class_name in stats["classes"].keys():
            stats["classes"][class_name] += 1
        else:
            stats["classes"][class_name] = 1

    report["services"] = a.get_services()
    for service in a.get_services():
        if service in stats["services"].keys():
            stats["services"][service] += 1
        else:
            stats["services"][service] = 1

    report["activities"] = a.get_activities()
    for activity in a.get_activities():
        if activity in stats["activities"].keys():
            stats["activities"][activity] += 1
        else:
            stats["activities"][activity] = 1

    report["receivers"] = a.get_receivers()
    for receiver in a.get_receivers():
        if receiver in stats["receivers"].keys():
            stats["receivers"][receiver] += 1
        else:
            stats["receivers"][receiver] = 1

    report["providers"] = a.get_providers()
    for provider in a.get_providers():
        if provider in stats["providers"].keys():
            stats["providers"][provider] += 1
        else:
            stats["providers"][provider] = 1

    report["files"] = {}
    for file in a.get_files():
        try:
            if check_header(a.get_file(file)[0:4].hex()) == "JAR":
                write_to_file(OUT_DIR, file.split("/")[-1], a.get_file(file))
                report["files"][file] = apk_analysis(OUT_DIR + file.split("/")[-1])

            elif check_header(a.get_file(file)[0:4].hex()) == "ELF":
                write_to_file(OUT_DIR, file.split("/")[-1], a.get_file(file))
                report["files"][file] = elf_analysis(OUT_DIR + file.split("/")[-1])

            else:
                report["files"][file] = {}

        except Exception as e:
            continue

        if file in stats["files"].keys():
            stats["files"][file] += 1
        else:
            stats["files"][file] = 1

    return {package_name: report}


def process():
    parser = argparse.ArgumentParser(description='Android Malware Stats\n',
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-d',
                        help='malware directory',
                        dest='malware_dir')
    args = parser.parse_args()

    init_stats()
    malware_dir = args.malware_dir
    global db

    for file in os.listdir(malware_dir):
        if apk_analysis(malware_dir + "/" + file):
            db = {**db, **apk_analysis(malware_dir + "/" + file)}

    with open('infos.json', 'w') as fp:
        json.dump(db, fp, indent=4)

    sorted_stats = {}
    for key, value in stats.items():
        sorted_stats = {**sorted_stats, **{key: {k: v for k, v in sorted(value.items(), key=lambda item: item[1])}}}

    with open('stats.json', 'w') as fp:
        json.dump(sorted_stats, fp, indent=4)


if __name__ == '__main__':
    process()
